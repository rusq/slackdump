// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/slackdump/v3/internal/source (interfaces: Sourcer,Resumer,Storage)
//
// Generated by this command:
//
//	mockgen -destination=mock_source/mock_source.go . Sourcer,Resumer,Storage
//

// Package mock_source is a generated GoMock package.
package mock_source

import (
	context "context"
	fs "io/fs"
	iter "iter"
	reflect "reflect"
	time "time"

	slack "github.com/rusq/slack"
	source "github.com/rusq/slackdump/v3/internal/source"
	structures "github.com/rusq/slackdump/v3/internal/structures"
	gomock "go.uber.org/mock/gomock"
)

// MockSourcer is a mock of Sourcer interface.
type MockSourcer struct {
	ctrl     *gomock.Controller
	recorder *MockSourcerMockRecorder
	isgomock struct{}
}

// MockSourcerMockRecorder is the mock recorder for MockSourcer.
type MockSourcerMockRecorder struct {
	mock *MockSourcer
}

// NewMockSourcer creates a new mock instance.
func NewMockSourcer(ctrl *gomock.Controller) *MockSourcer {
	mock := &MockSourcer{ctrl: ctrl}
	mock.recorder = &MockSourcerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcer) EXPECT() *MockSourcerMockRecorder {
	return m.recorder
}

// AllMessages mocks base method.
func (m *MockSourcer) AllMessages(ctx context.Context, channelID string) (iter.Seq2[slack.Message, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMessages", ctx, channelID)
	ret0, _ := ret[0].(iter.Seq2[slack.Message, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMessages indicates an expected call of AllMessages.
func (mr *MockSourcerMockRecorder) AllMessages(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMessages", reflect.TypeOf((*MockSourcer)(nil).AllMessages), ctx, channelID)
}

// AllThreadMessages mocks base method.
func (m *MockSourcer) AllThreadMessages(ctx context.Context, channelID, threadID string) (iter.Seq2[slack.Message, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllThreadMessages", ctx, channelID, threadID)
	ret0, _ := ret[0].(iter.Seq2[slack.Message, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllThreadMessages indicates an expected call of AllThreadMessages.
func (mr *MockSourcerMockRecorder) AllThreadMessages(ctx, channelID, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllThreadMessages", reflect.TypeOf((*MockSourcer)(nil).AllThreadMessages), ctx, channelID, threadID)
}

// Avatars mocks base method.
func (m *MockSourcer) Avatars() source.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Avatars")
	ret0, _ := ret[0].(source.Storage)
	return ret0
}

// Avatars indicates an expected call of Avatars.
func (mr *MockSourcerMockRecorder) Avatars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Avatars", reflect.TypeOf((*MockSourcer)(nil).Avatars))
}

// ChannelInfo mocks base method.
func (m *MockSourcer) ChannelInfo(ctx context.Context, channelID string) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelInfo", ctx, channelID)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelInfo indicates an expected call of ChannelInfo.
func (mr *MockSourcerMockRecorder) ChannelInfo(ctx, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelInfo", reflect.TypeOf((*MockSourcer)(nil).ChannelInfo), ctx, channelID)
}

// Channels mocks base method.
func (m *MockSourcer) Channels(ctx context.Context) ([]slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channels", ctx)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channels indicates an expected call of Channels.
func (mr *MockSourcerMockRecorder) Channels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channels", reflect.TypeOf((*MockSourcer)(nil).Channels), ctx)
}

// Files mocks base method.
func (m *MockSourcer) Files() source.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files")
	ret0, _ := ret[0].(source.Storage)
	return ret0
}

// Files indicates an expected call of Files.
func (mr *MockSourcerMockRecorder) Files() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockSourcer)(nil).Files))
}

// Name mocks base method.
func (m *MockSourcer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSourcerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSourcer)(nil).Name))
}

// Sorted mocks base method.
func (m *MockSourcer) Sorted(ctx context.Context, channelID string, desc bool, cb func(time.Time, *slack.Message) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sorted", ctx, channelID, desc, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sorted indicates an expected call of Sorted.
func (mr *MockSourcerMockRecorder) Sorted(ctx, channelID, desc, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sorted", reflect.TypeOf((*MockSourcer)(nil).Sorted), ctx, channelID, desc, cb)
}

// Type mocks base method.
func (m *MockSourcer) Type() source.Flags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(source.Flags)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockSourcerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSourcer)(nil).Type))
}

// Users mocks base method.
func (m *MockSourcer) Users(ctx context.Context) ([]slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", ctx)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockSourcerMockRecorder) Users(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockSourcer)(nil).Users), ctx)
}

// WorkspaceInfo mocks base method.
func (m *MockSourcer) WorkspaceInfo(ctx context.Context) (*slack.AuthTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkspaceInfo", ctx)
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkspaceInfo indicates an expected call of WorkspaceInfo.
func (mr *MockSourcerMockRecorder) WorkspaceInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkspaceInfo", reflect.TypeOf((*MockSourcer)(nil).WorkspaceInfo), ctx)
}

// MockResumer is a mock of Resumer interface.
type MockResumer struct {
	ctrl     *gomock.Controller
	recorder *MockResumerMockRecorder
	isgomock struct{}
}

// MockResumerMockRecorder is the mock recorder for MockResumer.
type MockResumerMockRecorder struct {
	mock *MockResumer
}

// NewMockResumer creates a new mock instance.
func NewMockResumer(ctrl *gomock.Controller) *MockResumer {
	mock := &MockResumer{ctrl: ctrl}
	mock.recorder = &MockResumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResumer) EXPECT() *MockResumerMockRecorder {
	return m.recorder
}

// Latest mocks base method.
func (m *MockResumer) Latest(ctx context.Context) (map[structures.SlackLink]time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", ctx)
	ret0, _ := ret[0].(map[structures.SlackLink]time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest.
func (mr *MockResumerMockRecorder) Latest(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockResumer)(nil).Latest), ctx)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// FS mocks base method.
func (m *MockStorage) FS() fs.FS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FS")
	ret0, _ := ret[0].(fs.FS)
	return ret0
}

// FS indicates an expected call of FS.
func (mr *MockStorageMockRecorder) FS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FS", reflect.TypeOf((*MockStorage)(nil).FS))
}

// File mocks base method.
func (m *MockStorage) File(id, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", id, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockStorageMockRecorder) File(id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockStorage)(nil).File), id, name)
}

// FilePath mocks base method.
func (m *MockStorage) FilePath(ch *slack.Channel, f *slack.File) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilePath", ch, f)
	ret0, _ := ret[0].(string)
	return ret0
}

// FilePath indicates an expected call of FilePath.
func (mr *MockStorageMockRecorder) FilePath(ch, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilePath", reflect.TypeOf((*MockStorage)(nil).FilePath), ch, f)
}

// Type mocks base method.
func (m *MockStorage) Type() source.StorageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(source.StorageType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockStorageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockStorage)(nil).Type))
}
